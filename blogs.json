{"status":"ok","feed":{"url":"https://medium.com/feed/@sj315","title":"Stories by SJ on Medium","link":"https://medium.com/@sj315?source=rss-3fd1bba2d411------2","author":"","description":"Stories by SJ on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*wu-vltxm4jkYIErs"},"items":[{"title":"The Rise of Low-Code Tools: A Deep Dive into WeWeb","pubDate":"2025-01-17 15:05:16","link":"https://medium.com/@sj315/the-rise-of-low-code-tools-a-deep-dive-into-weweb-bef01484fb95?source=rss-3fd1bba2d411------2","guid":"https://medium.com/p/bef01484fb95","author":"SJ","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/430/1*Q90XBs9ZTrEmQC5jKUf4QA.png\"></figure><p>Hey there, tech enthusiasts! Today, I want to have a chat about something that\u2019s been revolutionizing the way developers\u200a\u2014\u200aand even non-developers\u200a\u2014\u200abuild modern web applications. Enter <strong>WeWeb</strong>, a powerful low-code tool that\u2019s not just another \u201cdrag-and-drop\u201d builder but a full-fledged platform for creating dynamic, responsive, and highly technical applications with minimal coding. Sounds like a dream? Let\u2019s unpack it together!</p>\n<h3>What is\u00a0WeWeb?</h3>\n<p>At its core, <strong>WeWeb</strong> is a low-code platform that allows you to build modern front-end web applications while integrating seamlessly with back-end services like <strong>Supabase</strong>, <strong>Airtable</strong>, <strong>REST APIs</strong>, and more. It\u2019s a tool that strikes the perfect balance between ease of use for beginners and powerful customization options for developers.</p>\n<p>But don\u2019t mistake it for a website builder like Wix or Squarespace. WeWeb lets\u00a0you:</p>\n<ul>\n<li>\n<strong>Design pixel-perfect UIs</strong> with a visual\u00a0builder.</li>\n<li>\n<strong>Consume external APIs</strong> for dynamic\u00a0data.</li>\n<li><strong>Set up authentication workflows.</strong></li>\n<li>\n<strong>Write custom JavaScript</strong> for added\u00a0logic.</li>\n<li>And even deploy your app with\u00a0ease.</li>\n</ul>\n<p>Now let\u2019s get into the juicy technical stuff that makes WeWeb such a game-changer.</p>\n<h3>Why WeWeb is a Developer\u2019s Dream</h3>\n<p>If you\u2019ve ever struggled with managing front-end code, responsive design, or connecting APIs to display live data, WeWeb will feel like a breath of fresh air. Here\u2019s\u00a0why:</p>\n<h4>1. Dynamic Data\u00a0Binding</h4>\n<p>WeWeb allows you to bind your UI components (like tables, cards, forms, etc.) to external data sources with just a few clicks. No need to write tons of boilerplate code to handle API requests.</p>\n<p>For example, let\u2019s say you\u2019re pulling data from a <strong>Supabase</strong> database. Here\u2019s how you do it in\u00a0WeWeb:</p>\n<ul>\n<li>Add a new <strong>Data Source</strong> and select <strong>Supabase</strong>.</li>\n<li>Authenticate using your API key and connect to your\u00a0project.</li>\n<li>Write a query like this in Supabase to retrieve\u00a0data:</li>\n</ul>\n<pre>SELECT id, title, description <br>FROM posts<br>WHERE published = TRUE;</pre>\n<ul><li>Once your query is connected, bind the data to a WeWeb component (e.g., a table or a card list) by selecting the dynamic fields in the visual\u00a0editor.</li></ul>\n<p>Now, your UI will automatically update whenever the data changes in Supabase. Pretty slick,\u00a0right?</p>\n<h4>2. Custom Logic with JavaScript</h4>\n<p>Although WeWeb is low-code, it doesn\u2019t limit you from getting your hands dirty with JavaScript when you need to. If you want to add custom interactions or manipulate data before displaying it, you can inject JavaScript directly into WeWeb workflows.</p>\n<p>For example, let\u2019s say you need to format a date before showing it in your app. Here\u2019s how you can do\u00a0it:</p>\n<ol>\n<li>Add a JavaScript action in a workflow.</li>\n<li>Write a custom function like\u00a0this:</li>\n</ol>\n<pre>function formatDate(dateString) <br>{     <br>  const options = { <br>                    year: 'numeric', <br>                    month: 'long', <br>                    day: 'numeric' };     <br>return new Date(dateString).toLocaleDateString(undefined, options); <br>}</pre>\n<p>3. Use this function to process your data before passing it to a UI component.</p>\n<p>This flexibility allows developers to go beyond the default capabilities of the platform and truly customize their\u00a0apps.</p>\n<h4>3. Workflows and Conditional Logic</h4>\n<p>One of the standout features of WeWeb is its <strong>workflow engine</strong>. It\u2019s like the heart of your app, letting you define actions and events without writing complex state management code. You can set up workflows for:</p>\n<ul>\n<li>Button clicks.</li>\n<li>API calls.</li>\n<li>User authentication (e.g., with Supabase\u00a0Auth).</li>\n<li>Data transformations.</li>\n</ul>\n<p>For example, here\u2019s how you can create a simple workflow for a login\u00a0button:</p>\n<ol>\n<li>Add a <strong>Button</strong> to your\u00a0page.</li>\n<li>Go to the <strong>Workflows</strong> tab and create a new workflow for the\u00a0button.</li>\n<li>Select the <strong>Login with Supabase</strong> action and configure the inputs (email, password, etc.).</li>\n<li>Add a conditional step to check if the login was successful:</li>\n</ol>\n<pre>if (response.user) {<br>    // Redirect to the dashboard<br>} else {<br>    // Show an error message<br>}</pre>\n<p>5. Use the <strong>Navigate to Page</strong> action to redirect users upon\u00a0success.</p>\n<p>This no-code/low-code approach makes it easy to implement complex app logic without reinventing the\u00a0wheel.</p>\n<h4>4. Responsive Design Made\u00a0Easy</h4>\n<p>Designing for multiple screen sizes can be a headache, but WeWeb takes the pain out of it. Using its built-in responsive editor, you\u00a0can:</p>\n<ul>\n<li>Adjust the layout for desktop, tablet, and mobile\u00a0views.</li>\n<li>Customize styles (padding, margins, font sizes) for different breakpoints.</li>\n<li>Preview your app in real-time to see how it looks on different devices.</li>\n</ul>\n<p>No more wrestling with media queries or debugging CSS\u00a0issues!</p>\n<h3>Supabase + WeWeb: A Match Made in\u00a0Heaven</h3>\n<p>WeWeb becomes even more powerful when paired with back-end services like <strong>Supabase</strong>. Supabase acts as your database, authentication, and serverless function provider, while WeWeb takes care of the front end. Together, they give you the power to build full-stack apps without having to manage servers or write tons of backend\u00a0code.</p>\n<p>Here\u2019s a step-by-step guide to set up Supabase with\u00a0WeWeb:</p>\n<ol><li>\n<strong>Create a Supabase\u00a0Project</strong>:</li></ol>\n<ul>\n<li>Head over to <a href=\"https://supabase.com/\">Supabase</a> and create a new\u00a0project.</li>\n<li>Go to the \u201cSQL Editor\u201d and set up your database tables. For\u00a0example:</li>\n</ul>\n<pre>CREATE TABLE users (<br>    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),<br>    email TEXT UNIQUE NOT NULL,<br>    password TEXT NOT NULL,<br>    created_at TIMESTAMP DEFAULT now()<br>);<br><br>CREATE TABLE posts (<br>    id SERIAL PRIMARY KEY,<br>    title TEXT NOT NULL,<br>    description TEXT,<br>    published BOOLEAN DEFAULT FALSE,<br>    user_id UUID REFERENCES users(id),<br>    created_at TIMESTAMP DEFAULT now()<br>);</pre>\n<p><strong>2. Connect Supabase to\u00a0WeWeb</strong>:</p>\n<ul>\n<li>In WeWeb, go to <strong>Data Sources</strong> and add Supabase.</li>\n<li>Use the API URL and Key from your Supabase dashboard to authenticate.</li>\n</ul>\n<p><strong>3. Build Your Frontend in\u00a0WeWeb</strong>:</p>\n<ul>\n<li>Use dynamic bindings to display posts or user profiles.</li>\n<li>Add forms to let users submit data, and connect them to your Supabase tables via workflows.</li>\n</ul>\n<p>By combining the strengths of both platforms, you can create powerful apps without writing full-stack code manually.</p>\n<h3>Who is WeWeb\u00a0For?</h3>\n<p>WeWeb isn\u2019t just for non-developers or hobbyists. It\u2019s a serious tool\u00a0for:</p>\n<ul>\n<li>\n<strong>Front-end developers</strong> looking to speed up their workflow.</li>\n<li>\n<strong>Startups</strong> that need to build and iterate quickly without a full dev\u00a0team.</li>\n<li>\n<strong>Product managers and designers</strong> who want to prototype and test ideas without technical dependencies.</li>\n<li>\n<strong>Businesses</strong> that want to integrate complex systems via\u00a0APIs.</li>\n</ul>\n<h3>Why Should You Care About Low-Code?</h3>\n<p>The low-code movement isn\u2019t about replacing developers\u200a\u2014\u200ait\u2019s about empowering them to focus on higher-value work. With tools like WeWeb, you\u00a0can:</p>\n<ul>\n<li>Save time on repetitive coding\u00a0tasks.</li>\n<li>Reduce the cost of development.</li>\n<li>Experiment and iterate\u00a0faster.</li>\n</ul>\n<h3>Conclusion: Is WeWeb Worth\u00a0It?</h3>\n<p>Absolutely. Whether you\u2019re a seasoned developer or someone dipping their toes into web development for the first time, <strong>WeWeb</strong> is a tool that bridges the gap between simplicity and power. It removes the friction of traditional development while giving you all the flexibility you need to create modern, scalable\u00a0apps.</p>\n<p>So, if you haven\u2019t tried WeWeb yet, what are you waiting for? Head over to <a href=\"https://www.weweb.io/\">WeWeb</a> and start building the app of your dreams. And don\u2019t forget\u200a\u2014\u200ayou can always combine it with tools like Supabase to create something truly\u00a0amazing.</p>\n<p>Happy building, friends! Let me know in the comments\u200a\u2014\u200awhat would YOU build with\u00a0WeWeb?</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bef01484fb95\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/430/1*Q90XBs9ZTrEmQC5jKUf4QA.png\"></figure><p>Hey there, tech enthusiasts! Today, I want to have a chat about something that\u2019s been revolutionizing the way developers\u200a\u2014\u200aand even non-developers\u200a\u2014\u200abuild modern web applications. Enter <strong>WeWeb</strong>, a powerful low-code tool that\u2019s not just another \u201cdrag-and-drop\u201d builder but a full-fledged platform for creating dynamic, responsive, and highly technical applications with minimal coding. Sounds like a dream? Let\u2019s unpack it together!</p>\n<h3>What is\u00a0WeWeb?</h3>\n<p>At its core, <strong>WeWeb</strong> is a low-code platform that allows you to build modern front-end web applications while integrating seamlessly with back-end services like <strong>Supabase</strong>, <strong>Airtable</strong>, <strong>REST APIs</strong>, and more. It\u2019s a tool that strikes the perfect balance between ease of use for beginners and powerful customization options for developers.</p>\n<p>But don\u2019t mistake it for a website builder like Wix or Squarespace. WeWeb lets\u00a0you:</p>\n<ul>\n<li>\n<strong>Design pixel-perfect UIs</strong> with a visual\u00a0builder.</li>\n<li>\n<strong>Consume external APIs</strong> for dynamic\u00a0data.</li>\n<li><strong>Set up authentication workflows.</strong></li>\n<li>\n<strong>Write custom JavaScript</strong> for added\u00a0logic.</li>\n<li>And even deploy your app with\u00a0ease.</li>\n</ul>\n<p>Now let\u2019s get into the juicy technical stuff that makes WeWeb such a game-changer.</p>\n<h3>Why WeWeb is a Developer\u2019s Dream</h3>\n<p>If you\u2019ve ever struggled with managing front-end code, responsive design, or connecting APIs to display live data, WeWeb will feel like a breath of fresh air. Here\u2019s\u00a0why:</p>\n<h4>1. Dynamic Data\u00a0Binding</h4>\n<p>WeWeb allows you to bind your UI components (like tables, cards, forms, etc.) to external data sources with just a few clicks. No need to write tons of boilerplate code to handle API requests.</p>\n<p>For example, let\u2019s say you\u2019re pulling data from a <strong>Supabase</strong> database. Here\u2019s how you do it in\u00a0WeWeb:</p>\n<ul>\n<li>Add a new <strong>Data Source</strong> and select <strong>Supabase</strong>.</li>\n<li>Authenticate using your API key and connect to your\u00a0project.</li>\n<li>Write a query like this in Supabase to retrieve\u00a0data:</li>\n</ul>\n<pre>SELECT id, title, description <br>FROM posts<br>WHERE published = TRUE;</pre>\n<ul><li>Once your query is connected, bind the data to a WeWeb component (e.g., a table or a card list) by selecting the dynamic fields in the visual\u00a0editor.</li></ul>\n<p>Now, your UI will automatically update whenever the data changes in Supabase. Pretty slick,\u00a0right?</p>\n<h4>2. Custom Logic with JavaScript</h4>\n<p>Although WeWeb is low-code, it doesn\u2019t limit you from getting your hands dirty with JavaScript when you need to. If you want to add custom interactions or manipulate data before displaying it, you can inject JavaScript directly into WeWeb workflows.</p>\n<p>For example, let\u2019s say you need to format a date before showing it in your app. Here\u2019s how you can do\u00a0it:</p>\n<ol>\n<li>Add a JavaScript action in a workflow.</li>\n<li>Write a custom function like\u00a0this:</li>\n</ol>\n<pre>function formatDate(dateString) <br>{     <br>  const options = { <br>                    year: 'numeric', <br>                    month: 'long', <br>                    day: 'numeric' };     <br>return new Date(dateString).toLocaleDateString(undefined, options); <br>}</pre>\n<p>3. Use this function to process your data before passing it to a UI component.</p>\n<p>This flexibility allows developers to go beyond the default capabilities of the platform and truly customize their\u00a0apps.</p>\n<h4>3. Workflows and Conditional Logic</h4>\n<p>One of the standout features of WeWeb is its <strong>workflow engine</strong>. It\u2019s like the heart of your app, letting you define actions and events without writing complex state management code. You can set up workflows for:</p>\n<ul>\n<li>Button clicks.</li>\n<li>API calls.</li>\n<li>User authentication (e.g., with Supabase\u00a0Auth).</li>\n<li>Data transformations.</li>\n</ul>\n<p>For example, here\u2019s how you can create a simple workflow for a login\u00a0button:</p>\n<ol>\n<li>Add a <strong>Button</strong> to your\u00a0page.</li>\n<li>Go to the <strong>Workflows</strong> tab and create a new workflow for the\u00a0button.</li>\n<li>Select the <strong>Login with Supabase</strong> action and configure the inputs (email, password, etc.).</li>\n<li>Add a conditional step to check if the login was successful:</li>\n</ol>\n<pre>if (response.user) {<br>    // Redirect to the dashboard<br>} else {<br>    // Show an error message<br>}</pre>\n<p>5. Use the <strong>Navigate to Page</strong> action to redirect users upon\u00a0success.</p>\n<p>This no-code/low-code approach makes it easy to implement complex app logic without reinventing the\u00a0wheel.</p>\n<h4>4. Responsive Design Made\u00a0Easy</h4>\n<p>Designing for multiple screen sizes can be a headache, but WeWeb takes the pain out of it. Using its built-in responsive editor, you\u00a0can:</p>\n<ul>\n<li>Adjust the layout for desktop, tablet, and mobile\u00a0views.</li>\n<li>Customize styles (padding, margins, font sizes) for different breakpoints.</li>\n<li>Preview your app in real-time to see how it looks on different devices.</li>\n</ul>\n<p>No more wrestling with media queries or debugging CSS\u00a0issues!</p>\n<h3>Supabase + WeWeb: A Match Made in\u00a0Heaven</h3>\n<p>WeWeb becomes even more powerful when paired with back-end services like <strong>Supabase</strong>. Supabase acts as your database, authentication, and serverless function provider, while WeWeb takes care of the front end. Together, they give you the power to build full-stack apps without having to manage servers or write tons of backend\u00a0code.</p>\n<p>Here\u2019s a step-by-step guide to set up Supabase with\u00a0WeWeb:</p>\n<ol><li>\n<strong>Create a Supabase\u00a0Project</strong>:</li></ol>\n<ul>\n<li>Head over to <a href=\"https://supabase.com/\">Supabase</a> and create a new\u00a0project.</li>\n<li>Go to the \u201cSQL Editor\u201d and set up your database tables. For\u00a0example:</li>\n</ul>\n<pre>CREATE TABLE users (<br>    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),<br>    email TEXT UNIQUE NOT NULL,<br>    password TEXT NOT NULL,<br>    created_at TIMESTAMP DEFAULT now()<br>);<br><br>CREATE TABLE posts (<br>    id SERIAL PRIMARY KEY,<br>    title TEXT NOT NULL,<br>    description TEXT,<br>    published BOOLEAN DEFAULT FALSE,<br>    user_id UUID REFERENCES users(id),<br>    created_at TIMESTAMP DEFAULT now()<br>);</pre>\n<p><strong>2. Connect Supabase to\u00a0WeWeb</strong>:</p>\n<ul>\n<li>In WeWeb, go to <strong>Data Sources</strong> and add Supabase.</li>\n<li>Use the API URL and Key from your Supabase dashboard to authenticate.</li>\n</ul>\n<p><strong>3. Build Your Frontend in\u00a0WeWeb</strong>:</p>\n<ul>\n<li>Use dynamic bindings to display posts or user profiles.</li>\n<li>Add forms to let users submit data, and connect them to your Supabase tables via workflows.</li>\n</ul>\n<p>By combining the strengths of both platforms, you can create powerful apps without writing full-stack code manually.</p>\n<h3>Who is WeWeb\u00a0For?</h3>\n<p>WeWeb isn\u2019t just for non-developers or hobbyists. It\u2019s a serious tool\u00a0for:</p>\n<ul>\n<li>\n<strong>Front-end developers</strong> looking to speed up their workflow.</li>\n<li>\n<strong>Startups</strong> that need to build and iterate quickly without a full dev\u00a0team.</li>\n<li>\n<strong>Product managers and designers</strong> who want to prototype and test ideas without technical dependencies.</li>\n<li>\n<strong>Businesses</strong> that want to integrate complex systems via\u00a0APIs.</li>\n</ul>\n<h3>Why Should You Care About Low-Code?</h3>\n<p>The low-code movement isn\u2019t about replacing developers\u200a\u2014\u200ait\u2019s about empowering them to focus on higher-value work. With tools like WeWeb, you\u00a0can:</p>\n<ul>\n<li>Save time on repetitive coding\u00a0tasks.</li>\n<li>Reduce the cost of development.</li>\n<li>Experiment and iterate\u00a0faster.</li>\n</ul>\n<h3>Conclusion: Is WeWeb Worth\u00a0It?</h3>\n<p>Absolutely. Whether you\u2019re a seasoned developer or someone dipping their toes into web development for the first time, <strong>WeWeb</strong> is a tool that bridges the gap between simplicity and power. It removes the friction of traditional development while giving you all the flexibility you need to create modern, scalable\u00a0apps.</p>\n<p>So, if you haven\u2019t tried WeWeb yet, what are you waiting for? Head over to <a href=\"https://www.weweb.io/\">WeWeb</a> and start building the app of your dreams. And don\u2019t forget\u200a\u2014\u200ayou can always combine it with tools like Supabase to create something truly\u00a0amazing.</p>\n<p>Happy building, friends! Let me know in the comments\u200a\u2014\u200awhat would YOU build with\u00a0WeWeb?</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bef01484fb95\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["web-development","low-code","app-development","weweb"]},{"title":"Life Lately.","pubDate":"2024-11-29 12:14:59","link":"https://medium.com/@sj315/life-lately-a47499ec15de?source=rss-3fd1bba2d411------2","guid":"https://medium.com/p/a47499ec15de","author":"SJ","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/1*jJ101SPxxe_-xHJorPvdRA.jpeg\"><figcaption>Building dreams, one line of code at a time but yeah, my back does hurt in this corporate world</figcaption></figure><p>You know, life has a funny way of teaching us things. It twists and turns, throwing challenges our way, shaping us into who we are meant to become. Looking back at this past year, I can honestly say it\u2019s been a rollercoaster, a blend of hope, despair, and resilience.</p>\n<p>It all started on June 23, 2023\u00a0, to be precise. It was the day I graduated from FAST University. I stood there, a certificate in one hand and a head full of dreams. The possibilities seemed endless, the future felt bright. I was ready to take on the world armed with everything I had, my education and enthusiasm.</p>\n<p>But the world had other\u00a0plans.</p>\n<p>The job hunt was grueling. I sent out a ton of resumes, waiting anxiously for callbacks, went through countless interviews, and faced rejection after rejection, it felt like a never ending loop. But I kept pushing, believing that eventually, something would work out. And it did I landed a job at Terafort Ltd. Finally, I had a place where I could grow and contribute. Those initial days at Terafort were nothing short of exhilarating. I felt like I had finally found my footing in the professional world.</p>\n<p>But then, life threw another curveball.</p>\n<p>In March 2024, just a few months into my role, Terafort announced layoffs because they were shifting there office to other city. I still remember the sinking feeling in my chest when I received the news. It wasn\u2019t just the job I lost, it was the stability, the dreams, and the plans I had attached to it. It hit hard, and for a while, I was in a pretty dark place. I felt lost, stuck, and unsure of what to do\u00a0next.</p>\n<p>But even in that dark space, I knew I had to find a way\u00a0out.</p>\n<p>With time, I reminded myself of the strength I carried within. If I could navigate the challenges of university and the initial job hunt, I could rise again. I leaned on my support system my family, friends, and my own unwavering resolve. Slowly but surely, I began to\u00a0rebuild.</p>\n<p>In August 2024, a new door opened for me. I found another job, this time with Quixas Technology, where I joined as a Software Engineer. It felt like a fresh start, one that not only aligned with my aspirations but also offered the space to\u00a0grow.</p>\n<p>I\u2019ve realized that the journey I\u2019ve been on isn\u2019t just about finding a job or climbing a corporate ladder, it\u2019s about building my life on my own terms. I want to live independently, not just financially, but in every aspect. I want the freedom to make my own choices, to grow in my own way, and to be proud of the path I\u2019m creating.</p>\n<p>Now, as I write this, I can say with confidence that everything is going well. The struggles of the past year, though painful, have taught me invaluable lessons about resilience, patience, and the most important self-belief.</p>\n<p>Life doesn\u2019t always go as planned, but it\u2019s in those unplanned moments that we discover our true strength.</p>\n<p>To anyone reading this who might be facing their own challenges: hang in there. The storm doesn\u2019t last forever. And when the clouds part, the sunlight feels warmer, brighter because of everything you\u2019ve been through and worth every bit of the struggle.</p>\n<p>Here\u2019s to life, in all its highs and lows, and to living it on your own\u00a0terms.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a47499ec15de\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/1*jJ101SPxxe_-xHJorPvdRA.jpeg\"><figcaption>Building dreams, one line of code at a time but yeah, my back does hurt in this corporate world</figcaption></figure><p>You know, life has a funny way of teaching us things. It twists and turns, throwing challenges our way, shaping us into who we are meant to become. Looking back at this past year, I can honestly say it\u2019s been a rollercoaster, a blend of hope, despair, and resilience.</p>\n<p>It all started on June 23, 2023\u00a0, to be precise. It was the day I graduated from FAST University. I stood there, a certificate in one hand and a head full of dreams. The possibilities seemed endless, the future felt bright. I was ready to take on the world armed with everything I had, my education and enthusiasm.</p>\n<p>But the world had other\u00a0plans.</p>\n<p>The job hunt was grueling. I sent out a ton of resumes, waiting anxiously for callbacks, went through countless interviews, and faced rejection after rejection, it felt like a never ending loop. But I kept pushing, believing that eventually, something would work out. And it did I landed a job at Terafort Ltd. Finally, I had a place where I could grow and contribute. Those initial days at Terafort were nothing short of exhilarating. I felt like I had finally found my footing in the professional world.</p>\n<p>But then, life threw another curveball.</p>\n<p>In March 2024, just a few months into my role, Terafort announced layoffs because they were shifting there office to other city. I still remember the sinking feeling in my chest when I received the news. It wasn\u2019t just the job I lost, it was the stability, the dreams, and the plans I had attached to it. It hit hard, and for a while, I was in a pretty dark place. I felt lost, stuck, and unsure of what to do\u00a0next.</p>\n<p>But even in that dark space, I knew I had to find a way\u00a0out.</p>\n<p>With time, I reminded myself of the strength I carried within. If I could navigate the challenges of university and the initial job hunt, I could rise again. I leaned on my support system my family, friends, and my own unwavering resolve. Slowly but surely, I began to\u00a0rebuild.</p>\n<p>In August 2024, a new door opened for me. I found another job, this time with Quixas Technology, where I joined as a Software Engineer. It felt like a fresh start, one that not only aligned with my aspirations but also offered the space to\u00a0grow.</p>\n<p>I\u2019ve realized that the journey I\u2019ve been on isn\u2019t just about finding a job or climbing a corporate ladder, it\u2019s about building my life on my own terms. I want to live independently, not just financially, but in every aspect. I want the freedom to make my own choices, to grow in my own way, and to be proud of the path I\u2019m creating.</p>\n<p>Now, as I write this, I can say with confidence that everything is going well. The struggles of the past year, though painful, have taught me invaluable lessons about resilience, patience, and the most important self-belief.</p>\n<p>Life doesn\u2019t always go as planned, but it\u2019s in those unplanned moments that we discover our true strength.</p>\n<p>To anyone reading this who might be facing their own challenges: hang in there. The storm doesn\u2019t last forever. And when the clouds part, the sunlight feels warmer, brighter because of everything you\u2019ve been through and worth every bit of the struggle.</p>\n<p>Here\u2019s to life, in all its highs and lows, and to living it on your own\u00a0terms.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a47499ec15de\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["new-beginnings"]},{"title":"Embarking on a DevOps Journey: Mastering Docker, Kubernetes, Kaniko, and More!","pubDate":"2023-06-06 09:41:46","link":"https://medium.com/@sj315/embarking-on-a-devops-journey-mastering-docker-kubernetes-kaniko-and-more-119408078cbb?source=rss-3fd1bba2d411------2","guid":"https://medium.com/p/119408078cbb","author":"SJ","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EBXc9eJ1YRFLtkNI_djaAw.png\"></figure><p><em>Welcome to my blog,</em> where I will take you through my exhilarating learning journey in the DevOps course taught by the esteemed instructor, <strong>Saim Safdar</strong>. Throughout this course, I immersed myself in a world of cutting-edge technologies, including Docker, docker-compose, Kubernetes, Kaniko, Github, and containerization Docker.</p>\n<blockquote>Additionally, I delved into the realm of service mesh and successfully achieved the Fundamentals for Istio certification by Solo.io, validating my skills in installing, securing, and adding services to Istio\u200a\u2014\u200athe leading service mesh in cloud-native computing.</blockquote>\n<p>Along the way, I documented my progress through a series of technical blogs, focusing on key topics such as services in Kubernetes, the plugin architecture in Backstage.io, and container image building with Kaniko. Join me as I share the insights, challenges, and triumphs encountered throughout this transformative journey.</p>\n<ol>\n<li>\n<a href=\"https://medium.com/@samanj315/services-in-kubernetes-d9d9df39217f\"><strong>Services in Kubernetes</strong></a><strong>:</strong><br>In my first blog, I unveiled the remarkable world of services in Kubernetes\u200a\u2014\u200aa pivotal aspect of managing containerized applications. Through meticulous exploration, I uncovered the importance of services in facilitating communication between pods within a cluster. I delved into various service types, including ClusterIP, NodePort, and LoadBalancer, elucidating their unique use cases and benefits. I also ventured into the realm of service discovery and discussed approaches for exposing services externally. Throughout the blog, I shared the technicalities involved in implementing robust service routing and load-balancing mechanisms. Overcoming the initial challenges of understanding the intricacies of Kubernetes networking, I emerged with a comprehensive understanding of services and their vital role in modern application deployment.</li>\n<li>\n<a href=\"https://medium.com/@samanj315/backstage-io-plugin-architecture-in-backstage-io-e13b1ede711a\"><strong>Backstage.io: Plugin Architecture in Backstage.io</strong></a><strong>:</strong><br>In my second blog, I embarked on a journey into the world of Backstage.io, a cutting-edge platform for building developer portals and self-service operations interfaces. My focus was on the plugin architecture, a fundamental component of Backstage.io\u2019s extensibility. In this blog, we have explored the plugin architecture in Backstage.io in more detail and looked at some code snippets to see how it works. We have seen how plugins are loaded and managed using the @backstage/plugin-api package, how they can add new features and customize the appearance of the platform, and how they can interact with other plugins and platform APIs using the PluginContext interface. We have also seen how the CatalogApiinterface can be used to interact with the catalog and manage entities. Throughout the blog, I addressed the challenges of understanding the underlying framework and integrating custom\u00a0plugins.</li>\n<li>\n<a href=\"https://medium.com/@samanj315/kaniko-a2fa14714d66\"><strong>Kaniko\u200a\u2014\u200aContainer Image Building</strong></a><strong>:</strong><br>In my third blog, I unveiled the transformative capabilities of Kaniko\u200a\u2014\u200aa tool that revolutionizes container image building. I explored the intricacies of Kaniko, which allows building container images without privileged access or a Docker daemon. I elucidated its image caching mechanism, multi-stage builds, and layering techniques, providing a comprehensive understanding of its inner workings. Furthermore, I discussed the seamless integration of Kaniko into CI/CD pipelines, emphasizing the benefits of secure and reproducible container image builds. Challenges arose in optimizing build performance, managing dependencies, and ensuring compatibility with various container registries. However, through perseverance and experimentation, I triumphed over these obstacles, mastering Kaniko and successfully building efficient container images. By following the steps outlined in this blog, you can easily install and use Kaniko to build Docker images in your Kubernetes cluster.</li>\n</ol>\n<h4>Some More\u00a0Toolkits</h4>\n<ol>\n<li>\n<strong>Containerization with Docker and Docker Compose: </strong>Throughout the course, Docker and Docker Compose became indispensable tools in my DevOps journey. Docker allowed me to containerize applications, encapsulating them into portable and isolated units. Docker Compose facilitated the orchestration of multiple containers, enabling the creation of complex application stacks. I explored the Docker ecosystem, learning to write Dockerfiles, create and manage containers, and leverage Docker Compose to define multi-container environments. Containerization empowered me to achieve consistent deployments, scalability, and ease of development across different environments.</li>\n<li>\n<strong>Exploring Podman: A Powerful Alternative to Docker:</strong><br>In my DevOps journey, I expanded my horizons beyond Docker and explored the world of Podman\u200a\u2014\u200aan alternative container runtime that offers a lightweight and secure approach to containerization. Podman provides a seamless and user-friendly experience, making it an excellent choice for building and managing containers in production environments. With Podman, I delved into a new containerization paradigm, free from the need for a central daemon. I discovered that Podman offers a familiar command-line interface, allowing me to effortlessly run, build, and manage containers. Its compatibility with the Docker API ensured easy migration of existing Docker workflows, enabling a smooth transition to this powerful\u00a0tool.</li>\n<li>\n<strong>Service Mesh and GitHub Integration:</strong> As part of my exploration in the DevOps course, I delved into the realm of service mesh and gained a comprehensive understanding of its benefits. Istio, the leading service mesh, provides powerful features such as traffic management, security, and observability. By attaining the Fundamentals for Istio certification, I verified my skills in installing, securing, and adding services to Istio, solidifying my knowledge in cloud-native computing.</li>\n</ol>\n<blockquote>The integration of GitHub into my DevOps workflow was a game-changer. Its version control capabilities and collaborative features allowed me to work seamlessly with my team, track changes, and automate key processes. GitHub became the backbone of my codebase management, enabling efficient collaboration and ensuring a smooth development cycle.</blockquote>\n<h4>Conclusion:</h4>\n<p>My journey through the DevOps course taught by <strong>Saim Safdar</strong> has been a remarkable experience, filled with technical challenges and exponential growth. Alongside my coursework, I achieved the prestigious Fundamentals for Istio certification by Solo.io, validating my expertise in deploying and securing services within the Istio service mesh. In parallel, I wrote a series of technical blogs, capturing my insights and learnings throughout the\u00a0course.</p>\n<p>By immersing myself in the intricacies of services in Kubernetes, the plugin architecture of Backstage.io, and the power of Kaniko for container image building, I fortified my knowledge and gained practical expertise in these transformative technologies. The blogs I wrote during this course served not only as a testament to my progress but also as valuable resources for others embarking on similar journeys.</p>\n<p>Through resilience, perseverance, and the support of both Saim Safdar and the course community, I overcame the challenges I encountered, ultimately excelling in this course. The knowledge and skills gained in Docker, Kubernetes, Kaniko, service mesh, and containerization have positioned me as a proficient DevOps practitioner, ready to tackle complex infrastructure challenges with confidence and innovation.</p>\n<p>Join me in embracing the ever-evolving world of DevOps as we pave the way for a future of seamless, scalable, and efficient software development and deployment.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=119408078cbb\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EBXc9eJ1YRFLtkNI_djaAw.png\"></figure><p><em>Welcome to my blog,</em> where I will take you through my exhilarating learning journey in the DevOps course taught by the esteemed instructor, <strong>Saim Safdar</strong>. Throughout this course, I immersed myself in a world of cutting-edge technologies, including Docker, docker-compose, Kubernetes, Kaniko, Github, and containerization Docker.</p>\n<blockquote>Additionally, I delved into the realm of service mesh and successfully achieved the Fundamentals for Istio certification by Solo.io, validating my skills in installing, securing, and adding services to Istio\u200a\u2014\u200athe leading service mesh in cloud-native computing.</blockquote>\n<p>Along the way, I documented my progress through a series of technical blogs, focusing on key topics such as services in Kubernetes, the plugin architecture in Backstage.io, and container image building with Kaniko. Join me as I share the insights, challenges, and triumphs encountered throughout this transformative journey.</p>\n<ol>\n<li>\n<a href=\"https://medium.com/@samanj315/services-in-kubernetes-d9d9df39217f\"><strong>Services in Kubernetes</strong></a><strong>:</strong><br>In my first blog, I unveiled the remarkable world of services in Kubernetes\u200a\u2014\u200aa pivotal aspect of managing containerized applications. Through meticulous exploration, I uncovered the importance of services in facilitating communication between pods within a cluster. I delved into various service types, including ClusterIP, NodePort, and LoadBalancer, elucidating their unique use cases and benefits. I also ventured into the realm of service discovery and discussed approaches for exposing services externally. Throughout the blog, I shared the technicalities involved in implementing robust service routing and load-balancing mechanisms. Overcoming the initial challenges of understanding the intricacies of Kubernetes networking, I emerged with a comprehensive understanding of services and their vital role in modern application deployment.</li>\n<li>\n<a href=\"https://medium.com/@samanj315/backstage-io-plugin-architecture-in-backstage-io-e13b1ede711a\"><strong>Backstage.io: Plugin Architecture in Backstage.io</strong></a><strong>:</strong><br>In my second blog, I embarked on a journey into the world of Backstage.io, a cutting-edge platform for building developer portals and self-service operations interfaces. My focus was on the plugin architecture, a fundamental component of Backstage.io\u2019s extensibility. In this blog, we have explored the plugin architecture in Backstage.io in more detail and looked at some code snippets to see how it works. We have seen how plugins are loaded and managed using the @backstage/plugin-api package, how they can add new features and customize the appearance of the platform, and how they can interact with other plugins and platform APIs using the PluginContext interface. We have also seen how the CatalogApiinterface can be used to interact with the catalog and manage entities. Throughout the blog, I addressed the challenges of understanding the underlying framework and integrating custom\u00a0plugins.</li>\n<li>\n<a href=\"https://medium.com/@samanj315/kaniko-a2fa14714d66\"><strong>Kaniko\u200a\u2014\u200aContainer Image Building</strong></a><strong>:</strong><br>In my third blog, I unveiled the transformative capabilities of Kaniko\u200a\u2014\u200aa tool that revolutionizes container image building. I explored the intricacies of Kaniko, which allows building container images without privileged access or a Docker daemon. I elucidated its image caching mechanism, multi-stage builds, and layering techniques, providing a comprehensive understanding of its inner workings. Furthermore, I discussed the seamless integration of Kaniko into CI/CD pipelines, emphasizing the benefits of secure and reproducible container image builds. Challenges arose in optimizing build performance, managing dependencies, and ensuring compatibility with various container registries. However, through perseverance and experimentation, I triumphed over these obstacles, mastering Kaniko and successfully building efficient container images. By following the steps outlined in this blog, you can easily install and use Kaniko to build Docker images in your Kubernetes cluster.</li>\n</ol>\n<h4>Some More\u00a0Toolkits</h4>\n<ol>\n<li>\n<strong>Containerization with Docker and Docker Compose: </strong>Throughout the course, Docker and Docker Compose became indispensable tools in my DevOps journey. Docker allowed me to containerize applications, encapsulating them into portable and isolated units. Docker Compose facilitated the orchestration of multiple containers, enabling the creation of complex application stacks. I explored the Docker ecosystem, learning to write Dockerfiles, create and manage containers, and leverage Docker Compose to define multi-container environments. Containerization empowered me to achieve consistent deployments, scalability, and ease of development across different environments.</li>\n<li>\n<strong>Exploring Podman: A Powerful Alternative to Docker:</strong><br>In my DevOps journey, I expanded my horizons beyond Docker and explored the world of Podman\u200a\u2014\u200aan alternative container runtime that offers a lightweight and secure approach to containerization. Podman provides a seamless and user-friendly experience, making it an excellent choice for building and managing containers in production environments. With Podman, I delved into a new containerization paradigm, free from the need for a central daemon. I discovered that Podman offers a familiar command-line interface, allowing me to effortlessly run, build, and manage containers. Its compatibility with the Docker API ensured easy migration of existing Docker workflows, enabling a smooth transition to this powerful\u00a0tool.</li>\n<li>\n<strong>Service Mesh and GitHub Integration:</strong> As part of my exploration in the DevOps course, I delved into the realm of service mesh and gained a comprehensive understanding of its benefits. Istio, the leading service mesh, provides powerful features such as traffic management, security, and observability. By attaining the Fundamentals for Istio certification, I verified my skills in installing, securing, and adding services to Istio, solidifying my knowledge in cloud-native computing.</li>\n</ol>\n<blockquote>The integration of GitHub into my DevOps workflow was a game-changer. Its version control capabilities and collaborative features allowed me to work seamlessly with my team, track changes, and automate key processes. GitHub became the backbone of my codebase management, enabling efficient collaboration and ensuring a smooth development cycle.</blockquote>\n<h4>Conclusion:</h4>\n<p>My journey through the DevOps course taught by <strong>Saim Safdar</strong> has been a remarkable experience, filled with technical challenges and exponential growth. Alongside my coursework, I achieved the prestigious Fundamentals for Istio certification by Solo.io, validating my expertise in deploying and securing services within the Istio service mesh. In parallel, I wrote a series of technical blogs, capturing my insights and learnings throughout the\u00a0course.</p>\n<p>By immersing myself in the intricacies of services in Kubernetes, the plugin architecture of Backstage.io, and the power of Kaniko for container image building, I fortified my knowledge and gained practical expertise in these transformative technologies. The blogs I wrote during this course served not only as a testament to my progress but also as valuable resources for others embarking on similar journeys.</p>\n<p>Through resilience, perseverance, and the support of both Saim Safdar and the course community, I overcame the challenges I encountered, ultimately excelling in this course. The knowledge and skills gained in Docker, Kubernetes, Kaniko, service mesh, and containerization have positioned me as a proficient DevOps practitioner, ready to tackle complex infrastructure challenges with confidence and innovation.</p>\n<p>Join me in embracing the ever-evolving world of DevOps as we pave the way for a future of seamless, scalable, and efficient software development and deployment.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=119408078cbb\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["docker","devops","learning","kubernetes","github"]},{"title":"Services in Kubernetes","pubDate":"2023-05-10 16:37:25","link":"https://medium.com/@sj315/services-in-kubernetes-d9d9df39217f?source=rss-3fd1bba2d411------2","guid":"https://medium.com/p/d9d9df39217f","author":"SJ","thumbnail":"","description":"\n<p><strong>Kubernetes</strong> is a powerful container orchestration tool that has gained widespread adoption in the industry. One of the core concepts of Kubernetes is services, which allow applications to communicate with each other in a scalable and reliable way. In this blog, we will take a deeper look at services in Kubernetes, their purpose, and how to create and manage\u00a0them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/900/1*Yaj_cVbDHOaFD0i2hEHHIw.jpeg\"></figure><h4>What are Services in Kubernetes?</h4>\n<p>In Kubernetes, a service is an abstraction that provides a stable <strong>IP address and DNS name</strong> for a set of pods. Services allow applications to communicate with each other in a scalable and reliable way, even as pods are created and destroyed.</p>\n<p>Services are defined using the Kubernetes API and are associated with a set of pods based on their labels. The service acts as a load balancer, distributing incoming traffic among the pods that are associated with\u00a0it.</p>\n<h4>Why Use Services in Kubernetes?</h4>\n<p>Services in Kubernetes provide several benefits, including:</p>\n<p><strong>1. Load balancing:</strong> Services act as a load balancer, distributing incoming traffic among a set of\u00a0pods.</p>\n<p><strong>2. Scaling:</strong> Services allow for easy scaling of applications, as additional pods can be added or removed without impacting the\u00a0service.</p>\n<p><strong>3. Service discovery:</strong> Services provide a stable IP address and DNS name for a set of pods, making it easy for applications to communicate with each\u00a0other.</p>\n<h4>Creating a Service in Kubernetes</h4>\n<p>To create a service in Kubernetes, you first need to define the pod(s) that the service will be associated with. Pods are defined using a <strong>YAML file</strong> that specifies the container image, environment variables, and other configuration options. Once the pod(s) are defined, you can create a service using a similar YAML\u00a0file.</p>\n<p>Here is an example YAML file that defines a service for a set of\u00a0pods:</p>\n<pre>apiVersion: v1<br>kind: Service<br>metadata:<br> name: my-service<br>spec:<br> selector:<br> app: my-app<br> ports:<br> - name: http<br> port: 80<br> targetPort: 8080</pre>\n<p>In this example, the <strong>`selector`</strong> field specifies that the service should be associated with any pod that has the label <strong>`app=my-app`</strong>. The <strong>`ports`</strong> field specifies that incoming traffic on <strong>port 80 </strong>should be routed to <strong>port 8080</strong> on the\u00a0pods.</p>\n<h3>Multiple ports</h3>\n<p>The ports field of a Service is an array of ServicePort objects. The ServicePort object has these\u00a0fields:</p>\n<ul>\n<li>name</li>\n<li>protocol</li>\n<li>port</li>\n<li>targetPort</li>\n<li>nodePort</li>\n</ul>\n<p>If you have more than one ServicePort, each ServicePort must have a unique\u00a0name.</p>\n<p>Here\u2019s a Service, of the type Load Balancer, which has a port value of\u00a050000:</p>\n<pre>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: my-ap-service<br>spec:<br>  clusterIP: 10.11.241.93<br>  externalTrafficPolicy: Cluster<br>  ports:<br>  - nodePort: 30641<br>    port: 50000<br>    protocol: TCP<br>    targetPort: 8080<br>  selector:<br>    app: parts<br>    department: engineering<br>  sessionAffinity: None<br>  type: LoadBalancer<br>status:<br>  loadBalancer:<br>    ingress:<br>    - ip: 203.0.113.200</pre>\n<p>A client calls the Service 203.0.113.200 on TCP port 50000. The request is forwarded to one of the member Pods on TCP port\u00a08080.</p>\n<h4>Managing Services in Kubernetes</h4>\n<p>Kubernetes provides several commands for managing services, including creating, updating, and deleting services. Here are some of the most common commands for managing services:</p>\n<ul>\n<li>\n<strong>kubectl create service</strong>: Creates a new service in Kubernetes.</li>\n<li>\n<strong>kubectl get services</strong>: Retrieves a list of all services in the current namespace.</li>\n<li>\n<strong>kubectl describe service</strong>: Provides detailed information about a specific\u00a0service.</li>\n<li>\n<strong>kubectl apply service:</strong> To update the service, you can use the \u2018kubectl apply\u2019 command with an updated YAML file that contains the\u00a0changes.</li>\n<li>\n<strong>kubectl delete service</strong>: Deletes a service from Kubernetes.</li>\n</ul>\n<h4>Conclusion</h4>\n<p>Services in Kubernetes provide a powerful abstraction for managing communication between applications. They provide load balancing, scaling, and service discovery capabilities that make it easy to build and manage scalable, distributed applications. With Kubernetes, developers can focus on building their applications, while Kubernetes takes care of the complexities of managing services and their associated pods.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d9d9df39217f\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p><strong>Kubernetes</strong> is a powerful container orchestration tool that has gained widespread adoption in the industry. One of the core concepts of Kubernetes is services, which allow applications to communicate with each other in a scalable and reliable way. In this blog, we will take a deeper look at services in Kubernetes, their purpose, and how to create and manage\u00a0them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/900/1*Yaj_cVbDHOaFD0i2hEHHIw.jpeg\"></figure><h4>What are Services in Kubernetes?</h4>\n<p>In Kubernetes, a service is an abstraction that provides a stable <strong>IP address and DNS name</strong> for a set of pods. Services allow applications to communicate with each other in a scalable and reliable way, even as pods are created and destroyed.</p>\n<p>Services are defined using the Kubernetes API and are associated with a set of pods based on their labels. The service acts as a load balancer, distributing incoming traffic among the pods that are associated with\u00a0it.</p>\n<h4>Why Use Services in Kubernetes?</h4>\n<p>Services in Kubernetes provide several benefits, including:</p>\n<p><strong>1. Load balancing:</strong> Services act as a load balancer, distributing incoming traffic among a set of\u00a0pods.</p>\n<p><strong>2. Scaling:</strong> Services allow for easy scaling of applications, as additional pods can be added or removed without impacting the\u00a0service.</p>\n<p><strong>3. Service discovery:</strong> Services provide a stable IP address and DNS name for a set of pods, making it easy for applications to communicate with each\u00a0other.</p>\n<h4>Creating a Service in Kubernetes</h4>\n<p>To create a service in Kubernetes, you first need to define the pod(s) that the service will be associated with. Pods are defined using a <strong>YAML file</strong> that specifies the container image, environment variables, and other configuration options. Once the pod(s) are defined, you can create a service using a similar YAML\u00a0file.</p>\n<p>Here is an example YAML file that defines a service for a set of\u00a0pods:</p>\n<pre>apiVersion: v1<br>kind: Service<br>metadata:<br> name: my-service<br>spec:<br> selector:<br> app: my-app<br> ports:<br> - name: http<br> port: 80<br> targetPort: 8080</pre>\n<p>In this example, the <strong>`selector`</strong> field specifies that the service should be associated with any pod that has the label <strong>`app=my-app`</strong>. The <strong>`ports`</strong> field specifies that incoming traffic on <strong>port 80 </strong>should be routed to <strong>port 8080</strong> on the\u00a0pods.</p>\n<h3>Multiple ports</h3>\n<p>The ports field of a Service is an array of ServicePort objects. The ServicePort object has these\u00a0fields:</p>\n<ul>\n<li>name</li>\n<li>protocol</li>\n<li>port</li>\n<li>targetPort</li>\n<li>nodePort</li>\n</ul>\n<p>If you have more than one ServicePort, each ServicePort must have a unique\u00a0name.</p>\n<p>Here\u2019s a Service, of the type Load Balancer, which has a port value of\u00a050000:</p>\n<pre>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: my-ap-service<br>spec:<br>  clusterIP: 10.11.241.93<br>  externalTrafficPolicy: Cluster<br>  ports:<br>  - nodePort: 30641<br>    port: 50000<br>    protocol: TCP<br>    targetPort: 8080<br>  selector:<br>    app: parts<br>    department: engineering<br>  sessionAffinity: None<br>  type: LoadBalancer<br>status:<br>  loadBalancer:<br>    ingress:<br>    - ip: 203.0.113.200</pre>\n<p>A client calls the Service 203.0.113.200 on TCP port 50000. The request is forwarded to one of the member Pods on TCP port\u00a08080.</p>\n<h4>Managing Services in Kubernetes</h4>\n<p>Kubernetes provides several commands for managing services, including creating, updating, and deleting services. Here are some of the most common commands for managing services:</p>\n<ul>\n<li>\n<strong>kubectl create service</strong>: Creates a new service in Kubernetes.</li>\n<li>\n<strong>kubectl get services</strong>: Retrieves a list of all services in the current namespace.</li>\n<li>\n<strong>kubectl describe service</strong>: Provides detailed information about a specific\u00a0service.</li>\n<li>\n<strong>kubectl apply service:</strong> To update the service, you can use the \u2018kubectl apply\u2019 command with an updated YAML file that contains the\u00a0changes.</li>\n<li>\n<strong>kubectl delete service</strong>: Deletes a service from Kubernetes.</li>\n</ul>\n<h4>Conclusion</h4>\n<p>Services in Kubernetes provide a powerful abstraction for managing communication between applications. They provide load balancing, scaling, and service discovery capabilities that make it easy to build and manage scalable, distributed applications. With Kubernetes, developers can focus on building their applications, while Kubernetes takes care of the complexities of managing services and their associated pods.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d9d9df39217f\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["kubernetes","kubernetes-service","devops"]},{"title":"KANIKO- Container image building","pubDate":"2023-03-23 17:11:10","link":"https://medium.com/@sj315/kaniko-a2fa14714d66?source=rss-3fd1bba2d411------2","guid":"https://medium.com/p/a2fa14714d66","author":"SJ","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KFR2dyDgYJEov8r7jBOX1A.png\"></figure><p>Kaniko is a tool used for building container images inside a container or Kubernetes cluster without requiring privileged access. It is a multi-stage Docker image-building tool that can be used to build container images without requiring root-level access. It is an open-source tool developed by Google and is available on GitHub under the Apache License. Kaniko is designed to work with Kubernetes and other container orchestrators, enabling a seamless and efficient workflow.</p>\n<p>In this blog, we will discuss the features of Kaniko, its installation process, and how to use it to build Docker images in a Kubernetes cluster.</p>\n<h3>Features of\u00a0Kaniko</h3>\n<ul>\n<li>Kaniko does not require privileged access, so it can be used in secure environments.</li>\n<li>It can be used to build Docker images without having to mount the Docker daemon\u00a0socket.</li>\n<li>Kaniko is a lightweight tool that can be used to build container images from scratch, without requiring any pre-existing images.</li>\n<li>It supports Dockerfile syntax, which makes it easy to use for developers familiar with\u00a0Docker.</li>\n<li>Kaniko supports the use of environment variables in the Dockerfile, which makes it easy to customize the build\u00a0process.</li>\n</ul>\n<h3>Installation of\u00a0Kaniko</h3>\n<p>Kaniko can be installed on any system that supports Docker, including macOS, Linux, and Windows. The following steps can be used to install Kaniko on a Linux\u00a0system:</p>\n<ol>\n<li>Install Docker on the Linux\u00a0system.</li>\n<li>Download the Kaniko binary from the official GitHub\u00a0page.</li>\n<li>Move the binary to a directory in the system\u2019s\u00a0PATH.</li>\n<li>Ensure that the binary has executable permissions.</li>\n</ol>\n<h3>Get started with Kaniko to build Docker\u00a0images</h3>\n<p>Once Kaniko has been installed on a Kubernetes cluster, it can be used to build Docker images using the following command:</p>\n<p>some basic commands to get started with\u00a0Kaniko:</p>\n<ol><li>To build a Docker image using\u00a0Kaniko:</li></ol>\n<pre>kaniko --dockerfile=Dockerfile --context=/path/to/build/context --destination=my-image:latest</pre>\n<p>This command builds a Docker image using the Dockerfile located in the current directory, with the build context located at /path/to/build/context. The resulting image is tagged as my-image:latest.</p>\n<p>2. To build a Docker image with build arguments:</p>\n<pre>kaniko --dockerfile=Dockerfile --context=/path/to/build/context --destination=my-image:latest --build-arg KEY=VALUE</pre>\n<p>This command builds a Docker image using the Dockerfile located in the current directory, with the build context located at /path/to/build/context. The resulting image is tagged as my-image:latest and the build argument KEY is set to\u00a0VALUE.</p>\n<p>3. To push a Docker image to a registry:</p>\n<pre>kaniko --dockerfile=Dockerfile --context=/path/to/build/context --destination=my-registry.com/my-image:latest --push</pre>\n<p>This command builds a Docker image using the Dockerfile located in the current directory, with the build context located at /path/to/build/context. The resulting image is tagged as my-registry.com/my-image:latest and is pushed to the specified registry.</p>\n<p>4. To use a Dockerfile located in a Git repository:</p>\n<pre>kaniko --dockerfile=https://raw.githubusercontent.com/myuser/myrepo/master/Dockerfile --context=https://github.com/myuser/myrepo.git#master --destination=my-image:latest</pre>\n<p>This command builds a Docker image using the Dockerfile located in the specified Git repository, with the build context located at the specified branch. The resulting image is tagged as my-image:latest.</p>\n<h3>Conclusion</h3>\n<p>Kaniko is a powerful tool for building container images in a Kubernetes cluster. It can be used to build images without requiring privileged access or mounting the Docker daemon socket. With support for Dockerfile syntax and environment variables, Kaniko makes it easy to customize the build process. By following the steps outlined in this blog, you can easily install and use Kaniko to build Docker images in your Kubernetes cluster.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a2fa14714d66\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KFR2dyDgYJEov8r7jBOX1A.png\"></figure><p>Kaniko is a tool used for building container images inside a container or Kubernetes cluster without requiring privileged access. It is a multi-stage Docker image-building tool that can be used to build container images without requiring root-level access. It is an open-source tool developed by Google and is available on GitHub under the Apache License. Kaniko is designed to work with Kubernetes and other container orchestrators, enabling a seamless and efficient workflow.</p>\n<p>In this blog, we will discuss the features of Kaniko, its installation process, and how to use it to build Docker images in a Kubernetes cluster.</p>\n<h3>Features of\u00a0Kaniko</h3>\n<ul>\n<li>Kaniko does not require privileged access, so it can be used in secure environments.</li>\n<li>It can be used to build Docker images without having to mount the Docker daemon\u00a0socket.</li>\n<li>Kaniko is a lightweight tool that can be used to build container images from scratch, without requiring any pre-existing images.</li>\n<li>It supports Dockerfile syntax, which makes it easy to use for developers familiar with\u00a0Docker.</li>\n<li>Kaniko supports the use of environment variables in the Dockerfile, which makes it easy to customize the build\u00a0process.</li>\n</ul>\n<h3>Installation of\u00a0Kaniko</h3>\n<p>Kaniko can be installed on any system that supports Docker, including macOS, Linux, and Windows. The following steps can be used to install Kaniko on a Linux\u00a0system:</p>\n<ol>\n<li>Install Docker on the Linux\u00a0system.</li>\n<li>Download the Kaniko binary from the official GitHub\u00a0page.</li>\n<li>Move the binary to a directory in the system\u2019s\u00a0PATH.</li>\n<li>Ensure that the binary has executable permissions.</li>\n</ol>\n<h3>Get started with Kaniko to build Docker\u00a0images</h3>\n<p>Once Kaniko has been installed on a Kubernetes cluster, it can be used to build Docker images using the following command:</p>\n<p>some basic commands to get started with\u00a0Kaniko:</p>\n<ol><li>To build a Docker image using\u00a0Kaniko:</li></ol>\n<pre>kaniko --dockerfile=Dockerfile --context=/path/to/build/context --destination=my-image:latest</pre>\n<p>This command builds a Docker image using the Dockerfile located in the current directory, with the build context located at /path/to/build/context. The resulting image is tagged as my-image:latest.</p>\n<p>2. To build a Docker image with build arguments:</p>\n<pre>kaniko --dockerfile=Dockerfile --context=/path/to/build/context --destination=my-image:latest --build-arg KEY=VALUE</pre>\n<p>This command builds a Docker image using the Dockerfile located in the current directory, with the build context located at /path/to/build/context. The resulting image is tagged as my-image:latest and the build argument KEY is set to\u00a0VALUE.</p>\n<p>3. To push a Docker image to a registry:</p>\n<pre>kaniko --dockerfile=Dockerfile --context=/path/to/build/context --destination=my-registry.com/my-image:latest --push</pre>\n<p>This command builds a Docker image using the Dockerfile located in the current directory, with the build context located at /path/to/build/context. The resulting image is tagged as my-registry.com/my-image:latest and is pushed to the specified registry.</p>\n<p>4. To use a Dockerfile located in a Git repository:</p>\n<pre>kaniko --dockerfile=https://raw.githubusercontent.com/myuser/myrepo/master/Dockerfile --context=https://github.com/myuser/myrepo.git#master --destination=my-image:latest</pre>\n<p>This command builds a Docker image using the Dockerfile located in the specified Git repository, with the build context located at the specified branch. The resulting image is tagged as my-image:latest.</p>\n<h3>Conclusion</h3>\n<p>Kaniko is a powerful tool for building container images in a Kubernetes cluster. It can be used to build images without requiring privileged access or mounting the Docker daemon socket. With support for Dockerfile syntax and environment variables, Kaniko makes it easy to customize the build process. By following the steps outlined in this blog, you can easily install and use Kaniko to build Docker images in your Kubernetes cluster.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a2fa14714d66\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["docker","kaniko"]},{"title":"Backstage.io: Plugin Architecture in Backstage.io.","pubDate":"2023-02-21 11:24:00","link":"https://medium.com/@sj315/backstage-io-plugin-architecture-in-backstage-io-e13b1ede711a?source=rss-3fd1bba2d411------2","guid":"https://medium.com/p/e13b1ede711a","author":"SJ","thumbnail":"","description":"\n<p><strong>Backstage.io</strong> is an open-source platform developed by <strong>Spotify</strong> for building developer portals. It provides a unified platform for managing various software assets such as services, APIs, documentation, dashboards, and more. The platform is highly customizable and extensible, thanks to its plugin architecture. In this blog, we will explore the plugin architecture in Backstage.io in more detail and look at some code snippets to see how it\u00a0works.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wje_BzgrQEhX5Y0k94Cm1w.png\"></figure><p><strong>Plugin Architecture in Backstage.io</strong></p>\n<p>At its core, the plugin architecture in Backstage.io is a system for dynamically loading and managing plugins. Plugins are separate modules that contain code and resources that extend the functionality of the platform. They can add new features, integrate with external systems, or customize the appearance of the platform. Each plugin is contained within a separate directory, and its code and resources are isolated from other plugins and the platform\u00a0itself.</p>\n<p>Plugins in Backstage.io are loaded and managed using the @backstage/plugin-api package. This package provides a set of interfaces and methods that plugins can use to interact with the platform. The most important interface is the Plugin interface, which represents a single plugin. Each plugin exports a function that creates and returns a new instance of the Plugin interface. This function is typically named, createPlugin,and it takes an object with various configuration options as its only parameter. Here\u2019s an example of a simple plugin that adds a new page to the platform:</p>\n<pre>import { createPlugin, createRouteRef } from \u2018@backstage/plugin-api\u2019;<br>import MyPage from \u2018./MyPage\u2019;<br><br>export default createPlugin({<br> id: 'my-plugin',<br> routes: {<br> myPageRoute: createRouteRef({ path: '/my-page' }),<br> },<br> register(registry) {<br> registry.registerPage({<br> title: 'My Page',<br> path: 'myPageRoute',<br> component: MyPage,<br> });<br> },<br>});</pre>\n<p>This plugin defines a new page with the title \u201cMy Page\u201d and the path \u201c/my-page\u201d. The page component is defined in the MyPage module, which is not shown here. The routes option defines a new route reference with the path \"/my-page\", which can be used later to navigate to the page. The register method is called when the plugin is loaded and is used to register the new page with the platform using the registry\u00a0object.</p>\n<p><strong>Plugin Loading and Management</strong></p>\n<p>Once a plugin is defined, it needs to be loaded and managed by the platform. This is typically done using the loadBackend function from the @backstage/backend-common package. This function takes an instance of the App interface, which represents the entire platform, and an array of plugins to load. Here's an\u00a0example:</p>\n<pre>import { createApp } from \u2018@backstage/core\u2019;<br>import { loadBackend } from \u2018@backstage/backend-common\u2019;<br>import myPlugin from \u2018./my-plugin\u2019;<br><br>const app = createApp();<br>loadBackend(app, [myPlugin]);</pre>\n<p>This code creates a new instance of the platform using the createApp function and loads the myPlugin plugin using the loadBackend function. Once the plugin is loaded, it can be accessed and used by other plugins and the platform\u00a0itself.</p>\n<p><strong>Plugin API</strong></p>\n<p>The @backstage/plugin-api the package provides a set of interfaces and methods that plugins can use to interact with the platform. Here are some of the most important ones:</p>\n<ul><li>\n<strong>Plugin -</strong> Represents a single plugin and defines its configuration and functionality. Here\u2019s an example of how a plugin can create and return a new instance of the Plugin interface:</li></ul>\n<pre>import { createPlugin } from \u2018@backstage/plugin-api\u2019;<br>export default createPlugin({<br> id: 'my-plugin',<br> // \u2026<br> // Other configuration options and methods<br> // \u2026<br>});</pre>\n<p>The createPlugin function takes an object with various configuration options and methods, which are used to define the behavior and appearance of the plugin. The id option is required and should be a unique identifier for the\u00a0plugin.</p>\n<ul><li>\n<strong>PluginContext -</strong> Provides access to various platform APIs and services, such as the catalog API, the entity provider API, the config API, and more. Plugins can use this interface to interact with the platform and other plugins. Here\u2019s an example of how a plugin can access the catalog\u00a0API:</li></ul>\n<pre>import { PluginContext } from \u2018@backstage/plugin-api\u2019;<br>export default class MyPlugin implements Plugin {<br> // \u2026<br>async myMethod(pluginContext: PluginContext) {<br> const catalogApi = pluginContext.getExtensions('catalogApi')[0];<br> const entities = await catalogApi.getEntities();<br> // \u2026<br> }<br>// \u2026<br>}</pre>\n<ul><li>\n<strong>CatalogApi -</strong> Provides methods for interacting with the catalog, such as adding, and updating. Here\u2019s an example of how a plugin can use the CatalogApi interface to add a new entity to the\u00a0catalog:</li></ul>\n<pre>import { PluginContext, CatalogApi } from '@backstage/plugin-api';<br><br>export default class MyPlugin implements Plugin {<br>  // ...<br><br>  async myMethod(pluginContext: PluginContext) {<br>    const catalogApi = pluginContext.getExtensions('catalogApi')[0] as CatalogApi;<br>    const entity = {<br>      metadata: {<br>        name: 'my-entity',<br>        description: 'My entity description',<br>      },<br>      spec: {<br>        type: 'my-entity-type',<br>        // ...<br>      },<br>    };<br>    await catalogApi.addEntity(entity);<br>    // ...<br>  }<br><br>  // ...<br>}</pre>\n<p><strong>Conclusion</strong></p>\n<p>In this blog, we have explored the plugin architecture in Backstage.io in more detail and looked at some code snippets to see how it works. We have seen how plugins are loaded and managed using the @backstage/plugin-api package, how they can add new features and customize the appearance of the platform, and how they can interact with other plugins and platform APIs using the PluginContext interface. We have also seen how the CatalogApiinterface can be used to interact with the catalog and manage entities. Backstage.io's plugin architecture is a powerful and flexible system that enables developers to extend and customize the platform to meet their specific\u00a0needs.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e13b1ede711a\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p><strong>Backstage.io</strong> is an open-source platform developed by <strong>Spotify</strong> for building developer portals. It provides a unified platform for managing various software assets such as services, APIs, documentation, dashboards, and more. The platform is highly customizable and extensible, thanks to its plugin architecture. In this blog, we will explore the plugin architecture in Backstage.io in more detail and look at some code snippets to see how it\u00a0works.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wje_BzgrQEhX5Y0k94Cm1w.png\"></figure><p><strong>Plugin Architecture in Backstage.io</strong></p>\n<p>At its core, the plugin architecture in Backstage.io is a system for dynamically loading and managing plugins. Plugins are separate modules that contain code and resources that extend the functionality of the platform. They can add new features, integrate with external systems, or customize the appearance of the platform. Each plugin is contained within a separate directory, and its code and resources are isolated from other plugins and the platform\u00a0itself.</p>\n<p>Plugins in Backstage.io are loaded and managed using the @backstage/plugin-api package. This package provides a set of interfaces and methods that plugins can use to interact with the platform. The most important interface is the Plugin interface, which represents a single plugin. Each plugin exports a function that creates and returns a new instance of the Plugin interface. This function is typically named, createPlugin,and it takes an object with various configuration options as its only parameter. Here\u2019s an example of a simple plugin that adds a new page to the platform:</p>\n<pre>import { createPlugin, createRouteRef } from \u2018@backstage/plugin-api\u2019;<br>import MyPage from \u2018./MyPage\u2019;<br><br>export default createPlugin({<br> id: 'my-plugin',<br> routes: {<br> myPageRoute: createRouteRef({ path: '/my-page' }),<br> },<br> register(registry) {<br> registry.registerPage({<br> title: 'My Page',<br> path: 'myPageRoute',<br> component: MyPage,<br> });<br> },<br>});</pre>\n<p>This plugin defines a new page with the title \u201cMy Page\u201d and the path \u201c/my-page\u201d. The page component is defined in the MyPage module, which is not shown here. The routes option defines a new route reference with the path \"/my-page\", which can be used later to navigate to the page. The register method is called when the plugin is loaded and is used to register the new page with the platform using the registry\u00a0object.</p>\n<p><strong>Plugin Loading and Management</strong></p>\n<p>Once a plugin is defined, it needs to be loaded and managed by the platform. This is typically done using the loadBackend function from the @backstage/backend-common package. This function takes an instance of the App interface, which represents the entire platform, and an array of plugins to load. Here's an\u00a0example:</p>\n<pre>import { createApp } from \u2018@backstage/core\u2019;<br>import { loadBackend } from \u2018@backstage/backend-common\u2019;<br>import myPlugin from \u2018./my-plugin\u2019;<br><br>const app = createApp();<br>loadBackend(app, [myPlugin]);</pre>\n<p>This code creates a new instance of the platform using the createApp function and loads the myPlugin plugin using the loadBackend function. Once the plugin is loaded, it can be accessed and used by other plugins and the platform\u00a0itself.</p>\n<p><strong>Plugin API</strong></p>\n<p>The @backstage/plugin-api the package provides a set of interfaces and methods that plugins can use to interact with the platform. Here are some of the most important ones:</p>\n<ul><li>\n<strong>Plugin -</strong> Represents a single plugin and defines its configuration and functionality. Here\u2019s an example of how a plugin can create and return a new instance of the Plugin interface:</li></ul>\n<pre>import { createPlugin } from \u2018@backstage/plugin-api\u2019;<br>export default createPlugin({<br> id: 'my-plugin',<br> // \u2026<br> // Other configuration options and methods<br> // \u2026<br>});</pre>\n<p>The createPlugin function takes an object with various configuration options and methods, which are used to define the behavior and appearance of the plugin. The id option is required and should be a unique identifier for the\u00a0plugin.</p>\n<ul><li>\n<strong>PluginContext -</strong> Provides access to various platform APIs and services, such as the catalog API, the entity provider API, the config API, and more. Plugins can use this interface to interact with the platform and other plugins. Here\u2019s an example of how a plugin can access the catalog\u00a0API:</li></ul>\n<pre>import { PluginContext } from \u2018@backstage/plugin-api\u2019;<br>export default class MyPlugin implements Plugin {<br> // \u2026<br>async myMethod(pluginContext: PluginContext) {<br> const catalogApi = pluginContext.getExtensions('catalogApi')[0];<br> const entities = await catalogApi.getEntities();<br> // \u2026<br> }<br>// \u2026<br>}</pre>\n<ul><li>\n<strong>CatalogApi -</strong> Provides methods for interacting with the catalog, such as adding, and updating. Here\u2019s an example of how a plugin can use the CatalogApi interface to add a new entity to the\u00a0catalog:</li></ul>\n<pre>import { PluginContext, CatalogApi } from '@backstage/plugin-api';<br><br>export default class MyPlugin implements Plugin {<br>  // ...<br><br>  async myMethod(pluginContext: PluginContext) {<br>    const catalogApi = pluginContext.getExtensions('catalogApi')[0] as CatalogApi;<br>    const entity = {<br>      metadata: {<br>        name: 'my-entity',<br>        description: 'My entity description',<br>      },<br>      spec: {<br>        type: 'my-entity-type',<br>        // ...<br>      },<br>    };<br>    await catalogApi.addEntity(entity);<br>    // ...<br>  }<br><br>  // ...<br>}</pre>\n<p><strong>Conclusion</strong></p>\n<p>In this blog, we have explored the plugin architecture in Backstage.io in more detail and looked at some code snippets to see how it works. We have seen how plugins are loaded and managed using the @backstage/plugin-api package, how they can add new features and customize the appearance of the platform, and how they can interact with other plugins and platform APIs using the PluginContext interface. We have also seen how the CatalogApiinterface can be used to interact with the catalog and manage entities. Backstage.io's plugin architecture is a powerful and flexible system that enables developers to extend and customize the platform to meet their specific\u00a0needs.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e13b1ede711a\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":[]}]}